Day-1:
=====
			JAVA
			====
			
program
	- set of instruction to machine or computer
	
	language
	java
	
	language 2 types
	1 pop	eg c c++ cobal basic
	2 oop	eg c# java pyton
	
	line by line
	
	oop
	performance	> inheritance, polymorhism
	security	> encapsulation abstraction
	53 key words
	1991 james gosling
	oak
	1995 oak to java
	1995
	platform independent
	
	wora
	
	windows --> mac
	mac --> Linux
	JVM
	java virtual machine
	jDK =JRE+jvm
	portable :
	MObile web stanalone
	
	code write in .java extension
	
	|
	compile
	|
	.class
	|
	execute
	
	
	JVM
	
	sample program
	
	eclipse
	program
	Operators
Day-2:
======
	
JDK EDITIONS:
JSE Java Standard Edition
J2EE Java Enterprise Edition
J2ME Java Micro Edition

keywords in Java
53

int rollNumber = 101;

test.java

rollNumber
rollnumber  x
RollNumber  X

IDE -- smart compiler to execute the code
eg. eclipse, netbeans,vscode....

Eclipse Installation:


create a project
create a package
create a class

projectA
 package1	package2
 classA		classA
 classB		classC
 
 
 *every class have 2 members
 methods and variables
 
 print statements:
 1.print
 2.println
 
Day-3:
====== 
 Variable:
 variable is container it holds the value
 eg int i=5;
 
datatype variableName = value;

int a =10;

variable 
declaration
assignment

int a; // declaration
a=10; // assigning

rules for Identifiers:
1.case sensitive
2.Only Allowed characters :
	special characters
	$,_
	a to z
	A to Z
	0 to 9
	
3. Identifiers should not start with digit & space is not allowed
4.camel case	first letter small and next word first letter capital Eg: noOfDays
5.keywords or reserved words dont use

	.java
	compile cmd javac filename.java
	execution java filename
	
	constants:
	
	Eg: final int A =10;
	
	variable:
	container its store the value
	datatype varaible = value;
	eg: int a =10;
	
	types
	Local
	intance
	static
	
	Identifiers:
	
	Rules:
	1.Allowed charcters
	 a to z
	 A to Z
	 0 to 9
	 $
	 _
	 demo  - valid
	 demo@ - invalid
	 age# - invalid
	 age_  - valid
	2. Should not start with digit
	
	1demo - invalid
	demo3 - valid
	
	3. Keywords   --53 keywords
	
	  int byte = 100;  invalid
	  int for = 20;  invalid
	  int phonneNo = 9999;  valid
	  
	 4. Spaces are not allowed
	 
	   int phone no = 9999;   invalid
	   int phone_no = 9999;  valid
	   
	 5. case sensitive
	 
	 int Phone = 9999;
	 
	 Phone and phone are not same.
	 
	 
	 
Java coding conventions/Naming conventions:

 *noOfDays = 15;
  noofdays = 15;
 
 6 conventions
 1.conventions for class
	NoOfDays
	Test
		
 2. conventions for methods
	start with lower case
	eg: demo()
	noOfDays()
	

 3. conventions for interfaces
 
 same for clasess and interfaces
   start with Upper case without spaces
   
 4.conventions for variables
 	start with lower case
 Eg: int age;
 int phoneNumber;
 
 
 5.conventions for constants
 constant is fixed
 final int AGE = 20;
 final int PHONE_NUMBER = 99999;
 
 
 
 6. conventions for packages
	use small letters
	Eg: practise
	com.practice
	in.practise
	
	
 Comments:
 
 3 types
 1.single line 
 // comment
 
 2.multi line
 /*
 
 */
 3. Documentation comments
 /**
 
 */
 
 
 Operators:
 ==========
 Operator in java is a symbol that is used to perform operations
 Eg:
 +, -, *, /, %
 
 Unary
 Arthematic
 Relational
 conditional/Logical 
 Assignment Operators
 
 Unary Operator:
 a =10;
 +1 
 -1
 
 Day-4:
 ======
 Arthematic Operator:
 Addition +
 substraction -
 Multiplications *
 Division /
 Modulus %
 
 Relational Operator :
 <,>,<=,>=, == ,!=
 
 RETURN VALUE IS BOOLEAN
 
 Logical OPerators:
 =================
 AND &&
 OR ||
 
 RETURN VALUE IS BOOLEAN
 && (mandatory)
 true true --- true				Either one condition is false --> False
 true false ---false
 false true --- false
 false false --- false
 
 || (optional)
 true true --- true				either one is true -> True
 true false -- true
 false true --- true
 false false --- false
 
 Day -5:
 =======
 
 Assignment Operators:
 ====================
 =  int
 +=			
 -=
 *=
 /=
 %=
 
 
 Data Types:
 ===========
 
int a =10; type of data am storing in varaible.specify the size of the data.


dataType varaibleName = Value ;
2 type:
1.premitive
2.Non-premitive

1. Premitive DataTypes
 Numners Types
	Number
		byte
		short
		int
		long
	Decimal
		float
		double
 character Types
		char
 Boolean Types
		boolean

8 types of premitive dataType
byte
short		
int
long
float
double
char
boolean

 01 's these binary bits
 
 1 byte = 8bits
 i nipple = 4 bits
 1 byte = 8 bits
 1 kilo bytes = 1024 bits
 1 mega bytes = 1024 kb
 1 giga bytes = 1024 mb
 1 Tera byte  =  1024 gb
 1 peta byte  = 1024 tb
 
 Wrapper classes:
 byte - Byte
 short - Short
 int - Integer
 long - Long
 float - Float
 double - Double
 char - Character
 boolean - Boolean
 
 byte:
 integer data type
 value range beteen -128 to 127
 default value "0"
 eg: byte b = 10; 
 
 short:
 integer type
 2 bytes
 range is -32768 to 32767
 default value  " 0"

int:
integer type
4 bytes
range -2147483648 to 2147483647
default value = 0

long:
integer type 
8 bytes
range  -9223372036854775808 to 9223372036854775807
default value = 0
eg : long l = 1002;

float : 
integer data type
4 bytes
default value = 0.0f
Eg : float f =10.30f;

double:
integer dataType
8 bytes
default value = 0.0d
Eg: double abc = 15.123;		5.26489765  5.26

char:
char type
unicode 
\u0000 to \uffff or 0 to 65535
Eg: char a = 'H';
 
 
 
 
 DATATYPE	SIZE  DEFAULT_VALUE
 byte 		1byte	0
short   	2 bytes	0
int 		4		0
long		8		0
float		4		0.0f
double		8		0.0d
char		2		null
boolean		1bit	false

 
 
 data type > Byte >  byte
 
 
 Day-6:
 ======
 data types
 variables
 Operators
 
 *compilation starts from line by line but excution start from main methods
 
 Practice test programs
 1.
 2
 3
 4
 5
 6
 7
 8
 9
 10.
 
 
 Day -7:
 =======
 
 String:
 
 non-premitive data type 
 its literal
 
	char[] ch = {'a','n','t'};
	String s = new String(ch);
	
	or
	
	String s ="ant";
	
Java Type casting:
=================

convert from one data type to another data type is called as Type casting

double x = 5.0;
int y = x;

byte > short > char > int > long > float > double

2 types
1. widening casting
2. Narrow casting
1.widening/imlicit casting:
 small dat type to large type of data converting automatically.
 ther is no need to specify the compiler
 
 int i =4000;
 long h = i;
 
 2.Narrow / Explicit casting:
	manual casting
	specify inform to compiler
	
	eg:
	 long a = 750.25;
	 int b =a;
	 
	 
Methods:
========
Method is a block of code which is defined to perform specific task / operations

syn:
access modifier Static/Nonstatic returnType MethodName (parameter) {
	//block of code
	
	
	}
 
2 types of methods
parameterized
non parameterized / default

	
	method name is in camel case
	eg:
	 addOfMethod
	 
	
	
	predifined method
		defined java
		eg: print main...
	user defined method
		defined by user
		Eg:
		Static and instance
		
Object:
======

Object is an instance of class.

class is a blueprint of the code.
if class =figure
 object 1 = rectangle figure
 object 2 = square 
 object 3 = circle
 
we can create  n number of objects for a class

*Object Class is Super class of all classes.

	creation of object
	syn:
	classname objectName = new classname();

methods get executed only when called.

method calling 
2 types
 class name			when it is a static method using class name
 object creation 	when it is a instance method using object 

* code reusability

Day-8:
======
Parameters:
==========
single 
multiple

Return values:
==============

public class classname {
	public static void main(Strings[] args){
	
	}
	public static void methodName(){
		
	}
	public static int methodName2(int a, int b){
		return a-b;
	} 
}


return value in String and premitive data types

Method Overloading:
===================
multiple methods with same name with different parameters.

add()
add(int a, int b);
add(float a, float b);
add (long a , long b);
 
java scope:
===========
in Java , variable are only accessible inside the region they are created.

Method scope:
============
variable declared inside the method are available anywhere in the method

methodName{
int a = 100;
}

{
// we can't acces from another region
}
 
 Block scope:
=============
A block of code refers to all of the code between only braces
{ int a =150;

}
 
main(){
if (int a>10)
{

sysout "a is positive"
}
else 
 suysout "a is negative"
}

Day-9:
======
Packages:
========
A package in java is used to group related classes.

to avoid name conflict.
package:
display class    // not able to save with same name.
display class

package1:
 display class
package2 :
 display class
 
 better code:
 
 index page
 
 packes are divided into 2 categories
 2 types
 1. built in
 2.User defined
 
 1. Builtin packages:
 
 https://docs.oracle.com/javase/8/docs/api/
 
 import keywords
 
 *default package: "java.lang"
 ** Super class of all classes : Object.
  Object class consists methods and parameters and constructers
	-11 methods

 imoprt keywords
  import packagename.classname;
  import packageName.subPackagename.Classname;
  
  java.lang.
  import java.lang.*  // all classes in that package.
 import java.lang.System;  // specific class import from Built in package
 
 2. User defined:
 
 we creating packages as per our requirement
 
 using package keywords
 
 syntax:
  package packagename;
  
 standar syntax:
  package dmainName.companyName.package
  
  Eg: package com.java.basics;
  
  
 ========================================
 
 Day-10:
 =======
 
 Dynamic input from the User:
 ============================
 
 Run time input from user
 
 3 types :
  1.command line arguments
 *2.Scanner class
  3.BufferReader (in files i/p)
 
  1.command line arguments:
  =========================
  Command line arguments in java are used to pass arguments to the main program.
  
  pulic class Demo{
  public static void main(String[] args){
  
  System.out.println(Hello Java World");
  }
   
  }
  mathodName("a","b")
  
  Arguments we can pass
  String and premitive data types.
  
  
  Array:
  =====
  Array is an object which contains elements of similar type of data.
  
  int a = 10;
  
  int b =1,2,3;
  
  int[] a = {1,2,3,4};
	lenght of the array is fixed
	we can't change later either decrease or increase.
	
	lenthof array a=4
	index od array lenth - 1 // 4-1=3
	
	a[0] = 1
	a[1] = 2
	a[2] = 3
	a[3] = 4

Sring[] name = {"apple","orange","banana","Mango"};

		name[0]=apple
		name[1]=orange
		name[2]=banana
		name[3]=Mango

 String[] s = {"hyderabad","28","85.5","true"};
	
	string to integer we can convert
	
	parseInt,parseFloat,parseShort,parseByte,parseLong,parseCharacter,parseBoolean,parseDouble().
	
	Wrapper classes:
	
	data Type 			Wrapper class
	========			=============
	byte				Byte
	short 				Short
	int					Integer
	long				Long
	float				Float
	double				Double
	char				Character
	boolean				Boolean
	
	Eg:
		int a = Integer.parseInt("28");
		
		
2.Scanner class:
=================
predifined class in java language
it will in java.util package

System class
have 3 streams
1.output stream
2.input stream
3.error stream

input stream take data from user and stored at variable and do operation.

to reciept input from user.
Scanner class

create an object for scanner class and import java.util package

Scanner scan = new Scanner(System.in);
methods use :

 String  scan.nextLine(); ot scan.next()
 Integer	scan.nextInt();
Float	scan.nextFloat();
long	scan.nextLong();
double	scan.nextDouble();
char	scan.nextCharacter();
boolean scan.nextBoolean();
byte	scan.Byte();


Day--11:
=========
2.Scanner class:
=================
	^
	|


Java Dates:
java does not have a built in Date class, but we can inport the java.time package
to work with date and time

Eg:
LocalDate yyy-mm-dd

LocalTime HH-mm-ss-ns

DateTimeFormatter from "yyy-mm-dd"  to  "dd-mm-yyyy"


Day--12:
========

Control statements/Flow control:
===============================
-> In java we can write any number of statements which are executed in sequence order by 
default
-> But if we want to execute java statements according to our requirement then we have to 
use control statements
-> These statements decide whether a specific part of the code will be executed or not.


Eg:
 marks >= 35 ----> pass 
 otherwise (<35) ---> Fail

Types:3
1. Selection/conditional statements
2. Loop / Itereate Statements
3. Jump / transfer statements


1. Selection statements:
========================
a.if statements
		i).simple if
		ii).if -else
		iii).nested if
		iv). if else if
b. switch statements

1. Selection/conditional statements:
====================================
Conditional statements are used to execute group of statements based on condition.
Selection / condition statements  will evaluate BOOLEAN expression to make the decission.

i.simple if:
============

		if the condition is true block of code is executed ,
		if the condition is false block of code is Ignored.
		
Syntax:

if (condition){

Statements:// execute when condition is true

}
 
 ii.if -else:
 ============
 if else ithe extension of if statements
 which uses another block that is else block
 
 2 conditions
 
 Eg: 
 marks >=35  >>> pass 
 marks < 35 >>>> fail
 
 Syntax:
 ========
 if (condition){
 Statement 1 Eg: pass
 }else {
 Statement 2  Eg:fail
 }
 
 iii.Nested if:
 ==============
if  statement can contain a if or if else statement  
 if[if else] or if [if]
 
 Syntax:
 ========
 if (condition){
	if(condition){
		}else {
	
			}
 }
 
condition hava another condition we use nested if

 
 iV):if-else if else (if else ladder):
 ========================================
 
 if else if statements will be used when we need to compare the value with morethan 2 conditions.
 
 
 1 to n if else we use upto our requirement
 
 nested if:
  +
	+	
	 +
	   +

if -else if ladder:	   
+
+
+
+

 Syntax:
 =======
 if(condition){
 statement :1 
 }else if (condition){
 statement :2
 }else if (condition){
 statement :3
 }else 
statement :4

Assignment:
===========
Write a java program to check given number is even or odd number?

 Hint: use scanner class and if -else statement
 
 Day--13:
 ========
 
 b. switch statements:
 =====================
 switch statementscompares the value and execute one of the case blocks based on condition
 
 valu based condition
 
 like if else ladder (based on the condition)
 
 == operator no <><=>=
 points to remeber:
 ==================
 1.There can be one to N number of cases.
 2.The value in the case must be unique
 3.case value must be the same type of expression used in switch statement
 4.In each case statement have break statement (optional)
 5. default case (optional)
 
 Syntax:
 ======
 switch (expression or value){			// == operator
	case value1:
	  statement1;
	  break;
	case value2;
		statement2;
		break;
		.
		.
		.
	case valueN;
		statementN;
		break;
	default:
		statement;
 }
 ....
 

 nested switch statements:
 =========================
 
  Syntax:
 ======
 switch (expression or value){			// == operator
	case value1:
	  statement1;
	  break;
		 switch (expression or value){			// == operator
		case value1:
			statement1;
			break;
	case value2;
		statement2;
		break;
		.
		.
		.
	case valueN;
		statementN;
		break;
	default:
		statement;
 }
 
 
Day--14:
========

2. Loop / Itereate Statements:
==============================
iterate the sequence of the statements

>Looping statements are the statements that execute one or more statement repeatedly
 several number of times based on some condition.
 
decission makin condition will be boolean expression == true or false.

here if the statement will execute unless the condition is false.

3 types:
=======
while 
do-while
for loop

*for-each (extended for loop)
 
 
 while loop statements:
 =====================
 if we dont know number of iteration in advance then we should go for while loop.
 
 Syntax:
 ========
 while(condition){
 //statements
 }
 
 do-while:
 =========
 
 Syntax:
 ========
 do{
 //statements
 }while(condition)
 
 for Loop:
 ========
 If we know number of iterations in advance we use for loop.
 
 intilization
 condition
 updation (increment/decrement)
 
 Syntax:
 =======
 for(initilization;condition;updation){
 //statements
 }
 
 1st
  iniilazation
  condition
     > execution
	 
	 2nd onwards
	 updation
	 condition
	  > execution
 
 Nested for Loop:
 ================
 
 syntax:
 ======
 for(initilization;condition;updation){
	for(initilization;condition;updation){
		//statements
		}
 }
 
Day--15:
========

3. Jump / Branching/transfer statements:
========================================
 Transfer statements are the control statements which are used to 
 transfer the control position from one location to another location.
 
 3 types of jump statements:
 ============================
 1.break
 2.Continue
 3.return
 
 1.Break statement:
 ==================
 Break statement is used to break current execution flow of the program.
 
 case 1 
  s1:
  break;
 case 2
	s2
	break;
 case 3
 s3
 break;
 
 2.Continue statement:
 =====================
 continue statement is used to skip the current iteration of the loop. It jumps to the next iteration of the loop.
 
 3.Return:
 ========
 Return statement is used to transfering statement 
 which is used to stop the continuity of method execution.
 
 
 Assignments:
 
 
 Day--16:
 ========
 
 Constructor:
 ===========
 Constructor is a block of code similar to method.
 It is called when an instance/object of the class is created.
 At the time of calling constructor , memory for the object is allocated in the memory.
 
 public class demo{
 int a =10;
 
 psvm(){
 //statements   // variables and methods are mebers of class.
 }
 
 }
 
 Syntax:
 ======
 
 public classname(){
 //statements
 }
 
 Default constructer:
 ===================
 if we don't declare a constructor in the class ,JVM create an default constructer.
 
 
 Rules for constructor:
 ======================
1. constructor name must be a class name.
2. constructor can't take return type
3. we can't return any value from the constructor
4. constructor can take one or more parameters.

Constructers are 2 Types:
1.parametrized
2.Non parameterized

Constructor Overloading:
========================
Constructor Overloading is a technique in which a class can have any number of constructors that differ in parameters list.


Eg:
class name is :demo

demo(){

}


demo(int a, int b){

}

demo(String name, int age){

}
 
 

 Day--17:
==========
Arrays:
======
data Types:
2 types :
1.premitive
	a.byte
	b.short
	c.int
	d.long
	e.float
	f.double
	g.char
	h.boolean
	
2.non premitive.


dataType varName = value;
 
Eg:
 int a = 10;
 
 int a = new ClassName();
 a=10;
 
 java is not 100% Object Oriented Programing Language.
 
 2.non -premitive:
 Arrays
 Strings
 Interface
 class
 collections
 
 Arrays:
 =======
 Array is an object which contains elements of similar datatype.
 
 arrays contains multiple values with similar data type
 int a =15;
 int a = 15,20,25;	// similar data type
 int b = 25,35,"mango";  // Non similar data Type
 
 int emp_id = 101,102,103;
Array is also known as static data structure because size of an array is fixed.

size of  array is fixed
array is index based.
a = {15, 68, 91, 100} 
 	 0	 1	 2	 3	
 a[0]=15;
 a[1]=68;
 a[2]=91;
 a[3]=100;
 
 Array length is :4
 Array Index size : 3 (4-1)	/length-1
 
 Syntax:
 ======
 dataType[] a; or

 dataType []a; or

 dataType a[];
 Intialization:
 ===========
 dataType a = new dataType[size];
 
 define & initilization:
 =========================
 int[] b = new int[5];
 
 Arrays are 2 types:
 =====================
 1.Single Dimentional
 2.Multi Dimentional.
 
1.Single Dimentional:
======================
{1,2,3,4}

assesing Arrays :

using Loop statements like for while

 Advantages:
 ==========
1 Group of elements/data together.
 2.code readability

DisAdvantages:
=============
1.stores only similar data types
2.Array is fixed in size


Assignment:
=============
sum of Array value
Eg:
 int[] a={10,20,30,50} 
 output: 110 
 
 
  Day--18:
==========
2.Multi Dimentional:
====================
 a. Two dimensional
 b. Jagged array

a.Two dimesional array:
======================
eg:
[1,2,3]

Eg:
	1,2,3 
	4,5,6
m*n
 2*3
 length ao array is 2*3=6
 last index number is length -1 -> 6-1=5
 
 tabular form of data
 rows and columns
 Every row have fixed coloumns.
 EG:
  1 2 3
  4 5 6 
  7 8 9
  
  Eg:
   1 2 3
   4 5 6
   
   Eg:
    1 2
	4 5
	6 7
   
 Declaration :
 ============
 dataType [][] arrayName;
 Eg:
 int [][] aa;
 
 
 Initialization:
 =================
 dataType [][] arrayName = new int [][];
 
 Eg:
 int [][] aa = new int [2][3];
 
 out put:
   1 2 3
   4 5 6
   
 b.Jagged Array:
 =================
 Jagged array is an array that has different number of columns for each row.

Jagged array means to hava a multi dementional array with uneven size of columnsin it.

Eg:
 employee data =100
 id name 	disg 		addr 		domain mobile email ...
101 a		dev   		hyderabad	java	9989	abc@gmail.com
102	b	 	opertion		-		c++		98898	cde@gmail.com

2 rows 7 coloumns
but 
1st row have 7 coloumns 
2nd row only 6 coloumns

Eg:
 1  2  3
 4  5  6  7  8
 9  1
 
 while
 do-while
 for
 nested for
 for -each Loop statements:
 ===========================
 its also known as enhanced for Loop
 For each statement executes the block of statements for each element of the given array and collection.
 
 used in 
 Array and collection
 
 for each statements works from java version 5.0
 
 Syntax:
 =======
 for(dataType varName : arrayorOrCollection){
 //statements
 }
	
	default value incrementing by 1. we can not decrement or increment by morethan 1.	
** No.of iteration = size of Array.
	
	
 Day--19:
==========
 
 JAVA 8 FEATURES:
 ================
 java 8 is an version
 
 in March 18th,2014 introduced java 8.
 
 java 1.0,1.1,1.2,...1.7..1.8 so termed as 8 ..9,10,11...
 
 150 lines code using 
 functional proamming its goes to 75 or 80 lines
 
 python
 c
 c#
 Ruby
 
 now java also introduced functional programming.
 
 Objectives of java 8:
 =====================
 1.to simplify the programming  ... more concise way
 2. to Utilize the functional programming in java
 3. to enable parallel programming . etc. readable, maintainable,concise code.
 
 To use API's very easily and effectively.
 
 
 Features:
 ===========
 1.Lamda Expression
 2.Functional Interface
 3.Default and static methods
 4.Predifined Functional Interfaces
	predicate
	Function
	consumer
	supplier
	etc..
5.Double colons (::)
6.Streams
7.Date and Time API
8.Optional Class.

1.Lamda Expression:
===================
Introduced in 1930 
LISP (ListProccessing)programing Language

python
Ruby
c
c#
scala
Finally in JAVA .

Main objective of Lamda Expression:
To bring benifits of functional programing into java.

A Lamda Expression is an Anonymous function.
i.e a function without name and without identifier.We can pass it to other methods as parameters,therefore using the power of functional programing.

No Name
No modifier
No Return Type (Optional)

why use Lamda Expression:
to write functional programming
to write more readable and concise.
to enable parllel processing.

Syntax:
========
(parameters_list) -> {(function_body)}

Eg:1
//java method

public void add(int a , int b){
	return a+b;
}

(int a, int  b) -> {return a+b;}

or 
(a,b) -> {return a+b;}

Note : parameter dataType is not mandatory untill all parameters have same dataType.

or
(a,b)-> {a+b;}

or
(a,b)-> a+b;

Note : Single statements curle braces or not mandatory.

Eg.2:
=====
public void add(int a , float b){
	return a+b;
}

(int a, float b) -> {return a+b;}

Note: if return type mention curle braces are mandatory.

Eg.3:
=====
public void m1(){
	s.o.p("hi);
}

()->{s.o.p("hi);}
or
()->s.o.p("hi);

Eg.4:
=====
public void add(int a, int b){
	int c = a+b;
	s.o.p(c);
}

(a,b)-> {s.o.p (a+b);}
or
(a,b)-> s.o.p (a+b);

Eg.5:
====
public int getlength(String s){
 return s.length();
}

(s) -> {s.length();}
or
s -> s.length();

(int a, float b)-> s.o.p(a*b);

public void m (int a , float b){
	s.o.p(a*b);
}


Eg.6:
====
public int square (int a){
	return a*a;
}

a -> {return (a*a);}

 Day--20:
==========

void add(){
sysop ("hello world)
}

ClassName var = new ClassName();
var.add();

To invoke Lamda Expression we use "Functional Interface"

2. Functional Interface:
=======================
Interface:
==========
3.types
1.Interfaces	( Any no.of Abstract methods /n no.of AM)
2.Marked interfaces (zero methods /no methods) 
3.Functional Interfaces. (SAM -SINGLE ABSTRACT Method)

before java 1.8 in interfaces we have only abstract methods
from java 1.8 onwards we have abstract methods and default + static methods.

Functional Interface have SAM
@FunctionalInterface
It can be used for to call/invoke the Lamda Expression



3.Default and static methods:
=============================
Default and static methods in interfaces 

    Interface Test 
	--------------
	Class A  B  C  D   (Implementing)

4.Predifined Functional Interfaces:
===================================
	predicate
	Function
	consumer
	supplier
	etc..

Reference:
==========
https://docs.oracle.com/javase/8/docs/api/


Date and Time API:
==================
Localdate yyy-mm-dd
LocalTime Hour-mm-sec
LocaldateTime
Period class.


Day--21:
========
Optional class:
===============

String a;
String b;
sysout(a+b);
optional class which is in java.util. package


6.Stream API:
=============
source from array and Collections.
streams are process the data
collections are storing the data
streams and collections are not same.

few imp points:
---------------
>Stream is not a data structure. It is a bunch of operations applied to a source.
>source can be collections , arrays or i/o channels.
Stream dont change the original data structure.
>Ther can be zero or more intermediate operations that streams into another stream
each intermedaite operations is lazily executed.
> Terminal operations produce the result

we have 2 operations
1. Intermediate OPeration (from one another stream)
2. Terminal Operation (takes input and publih result)

Stream Creation:
===============
in java 8 we can create stream in 2 ways

1.Stream.of(v1,v2,v3...)
2.stream()method

Streams with filter:
====================
filter() method takes Predicate as input

predicate is an functional interface which will take input and returns boolean value.

Eg:

Double colons (::):
=====================
Method Reference Operator

Demo demo1 = new Demo();

Method reference shortend for Lamda Expression.
That call a specific method


Type Inference:
================
from java 10 onwards Type Inference is introduced.

defining variable
Eg:
 int a;
 
initializing variable
Eg:
 a= 10;
 
define & initializing variable

 int a = 10;
 
 javascript dataTypes
  var 
  let 
  constant
  
 from java 10 onwards java  introduced  var keyword.
 
 Key points:
 ==========
1. We can declare any datatype with the var keyword.
2. var can be used in a local variable declaration.
3. var cannot be used in an instance and global variable declaration.
4. var cannot be used as a Generic type.
	Eg: var<var> al = new ArrayList<>();
5. var cannot be used with the generic type.
	Eg:  var<Integer> al = new ArrayList<Integer>();
6. var cannot be used without explicit initialization.
	Eg:	var variable = null;
7. var cannot be used with Lambda Expression.
	Eg:	var obj = (a, b) -> (a + b);
8. var cannot be used for method parameters and return type.
	Eg: var method1() { return ("Inside Method1"); }










































































	
	
	
	
	
	
	
	


	
	
	
	

			
			
			
			
			
			
			
			
			
			
			
			
			