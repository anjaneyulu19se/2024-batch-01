Constructors:
=============
In Java, a constructor is a block of codes similar to the method. It is called 
when an instance of the class is created. At the time of calling constructor, 
memory for the object is allocated in the memory.

-> When we declare instance variables and not initialized with any value, then they 
automatically initialized with default values.
-> but if we want to initialize instance variables with our own values then we can initialize 
instance variables in following 2 locations,
1. At the time of declaration
2. Using Constructor
-> A constructor is a special method that is used to initialize an object / instance variables.
-> If we don't declare a constructor in the class then JVM builds a default constructor for 
that class. This is known as default constructor.

Rules of the constructor :
==========================
• Constructor name must be same as Class Name
• Constructor cannot take any return type but if we write any return type then the 
code is valid but it is considered as normal method
• We cannot return any value from the constructor
• Constructors can take one or parameters

Default Constructor
-> In Java, a constructor is said to be default constructor if it does not have any parameter. 
Default constructor can be either user defined or provided by JVM.
-> If a class does not contain any constructor, then during runtime JVM generates a default 
constructor which is known as system define default constructor.
-> If a class contain a constructor with no parameter, then it is known as default constructor 
defined by user. In this case JVM does not create default constructor

our view:
public class demo{
	psvm(){
	//statements
	}
}


compiler generated code:
=========================

public class demo{
public demo(){
}
	psvm(){
	//statements
	}
}


Based on the number of parameters, constructors are classified into following 2 types,
1) 0 Parameterized Constructor (Parameter Less)
2) Parameterized Constructor

0 parametrized constructor:
===========================
-> If we declare any constructor without any parameters then it is called as 0 parametrized 
constructor.
Eg:
===
public class demo{
	demo(){
	//statements
	}
}

 When we create object for the class then Constructor will be called.
 
 Eg:
 ===
public class demo{
public demo(){
	//sysout("constructer called...");
	}
	psvm(){
	//statements	demo con = new demo(); // creatin object
	}
}
 
2.Parametrized constructor:
==========================
If we declare any constructor with parameters then it is called as parameterized 
constructor. 

Syntax:
=======
public class demo{
	demo(parameters){
	//statements
	}
}

Eg:
===
public class demo{
	demo(int a){
	//statements
	}
}
Note: When the constructor is having parameters, at the time of creating object we have to 
pass those parameters.

// Program on Parameterized Constructor

public class demo{
	int age;
	String name;
	
	public demo(int a,String n){
		age = a;
		name = n;
	}
	psvm(){
	demo d = new demo(25,"sam");
	sysout("age"+ d.age);
	sysout("name "+d.name);
	
	}
}
When the default constructor will be added by JVM ?
-> When our class doesn’t have any constructor then only JVM will add constructor
-> If our class having any constructor, then JVM will not add any constructor

Constructor Overloading:
========================
-> Java Constructor overloading is a technique in which a class can have any number of 
constructors that differ in parameter list. 
In other words, defining two or more constructors with the same name but with different 
signatures is called constructor overloading in java. 
It is used to perform different tasks.
-> The compiler differentiates these constructors by taking into account the number of 
parameters in the list and their data type
Eg:
===

account();
account(int a, int b);
account(String name, int age);
